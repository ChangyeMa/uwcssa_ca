# sudo amplify api gql-compile && amplify codegen
enum SortKey {
  SortKey
}

type User
  @model(subscriptions: null)
  @searchable
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] } #如果不加的话会导致在创建的时候unauthorize
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  username: String!
  email: AWSEmail!
  owner: String!
  firstName: String
  lastName: String
  intro: String
  major: String
  avatarImgURL: AWSURL
  backGroundImgURL: AWSURL
  linkedIn: String
  github: String
  sortKey: SortKey!
    @index(
      name: "userSortBySortKey"
      queryField: "userSortBySortKey"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
  badges: [String]
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
        { allow: public, operations: [read], provider: iam }
        { allow: private, operations: [read] }
        { allow: private, operations: [read], provider: iam }
      ]
    )
  userEducations: [UserEducation] @hasMany(indexName: "byUser", fields: ["id"])
  userExperiences: [UserExperience]
    @hasMany(indexName: "byUser", fields: ["id"])
  marketUserInfo: [MarketUserInfo] @hasMany(indexName: "byUser", fields: ["id"])
  beingLiked: [Like] @hasMany(indexName: "byUserBeingLiked", fields: ["id"])
  forumPosts: [ForumPost] @hasMany(indexName: "byUser", fields: ["id"])
  marketItems: [MarketItem] @hasMany(indexName: "byUser", fields: ["id"])
  kanbanAssignee: [Kanban] @hasMany(indexName: "byUserAssignee", fields: ["id"])
}

type UserEducation
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  school: String
  degree: String
  fieldOfStudy: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  grade: Float
  description: String
  createdAt: AWSDateTime!
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  user: User! @belongsTo(fields: ["userID"])
}

type UserExperience
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  title: String
  employmentType: String
  companyName: String
  location: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  industry: String
  description: String
  createdAt: AWSDateTime!
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  user: User! @belongsTo(fields: ["userID"])
}

type Topic
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  articles: [Article] @hasMany(indexName: "byTopic", fields: ["id"])
  events: [Event] @hasMany(indexName: "byTopic", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type Article
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  title: String!
  summary: String
  content: String!
  imgURLs: [AWSURL]
  qrCodeImgURL: AWSURL
  likes: [Like] @hasMany(indexName: "byArticle", fields: ["id"])
  tags: [String]
  sortKey: SortKey!
    @index(
      name: "articleSortBySortKey"
      queryField: "articleSortBySortKey"
      sortKeyFields: ["createdAt"]
    )
  active: Boolean!
  createdAt: AWSDateTime!
  topicID: ID! @index(name: "byTopic")
  topic: Topic! @belongsTo(fields: ["topicID"])
  comments: [Comment] @hasMany(indexName: "byArticle", fields: ["id"])
  subComments: [SubComment] @hasMany(indexName: "byArticle", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type Comment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  content: String!
  likes: [Like] @hasMany(indexName: "byComment", fields: ["id"])
  active: Boolean!
  targetID: ID!
    @index(name: "byArticle", sortKeyFields: ["createdAt"])
    @index(name: "byEvent", sortKeyFields: ["createdAt"])
  article: Article @belongsTo(fields: ["targetID"])
  event: Event @belongsTo(fields: ["targetID"])
  createdAt: AWSDateTime!
  subComments: [SubComment] @hasMany(indexName: "byComment", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type SubComment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  content: String!
  likes: [Like] @hasMany(indexName: "bySubComment", fields: ["id"])
  active: Boolean!
  targetID: ID!
    @index(name: "byArticle", sortKeyFields: ["createdAt"])
    @index(name: "byEvent", sortKeyFields: ["createdAt"])
  article: Article @belongsTo(fields: ["targetID"])
  event: Event @belongsTo(fields: ["targetID"])
  commentID: ID! @index(name: "byComment", sortKeyFields: ["createdAt"])
  comment: Comment! @belongsTo(fields: ["commentID"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
  replyToUserID: ID
  replyTo: User @hasOne(fields: ["replyToUserID"])
}

type Event
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  summary: String
  title: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  online: Boolean!
  group: Boolean!
  backGroundImgURL: AWSURL
  qrCodeImgURL: AWSURL
  posterImgURL: AWSURL
  imgURLs: [AWSURL]
  content: String
  addressID: ID
  address: Address @hasOne(fields: ["addressID"])
  sponsor: [String]
  tags: [String]
  eventStatus: EventStatus!
  active: Boolean!
  createdAt: AWSDateTime!
  sortKey: SortKey!
    @index(
      name: "eventSortBySortKey"
      queryField: "eventSortBySortKey"
      sortKeyFields: ["createdAt"]
    )
  topicID: ID! @index(name: "byTopic")
  topic: Topic! @belongsTo(fields: ["topicID"])
  forms: [Form] @hasMany(indexName: "byEvent", fields: ["id"])
  eventComments: [EventComment] @hasMany(indexName: "byEvent", fields: ["id"])
  eventParticipants: [EventParticipant]
    @hasMany(indexName: "byEvent", fields: ["id"])
  likes: [Like] @hasMany(indexName: "byEvent", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
  comments: [Comment] @hasMany(indexName: "byEvent", fields: ["id"])
  subComments: [SubComment] @hasMany(indexName: "byEvent", fields: ["id"])
}

enum EventStatus {
  ComingSoon
  InProgress
  SignUpClosed
  Finished
  Canceled
}

type EventComment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  content: String!
  likes: [Like] @hasMany(indexName: "byEventComment", fields: ["id"])
  active: Boolean!
  eventID: ID!
    @index(
      name: "eventCommentSortByEventID"
      queryField: "eventCommentSortByEventID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byEvent", sortKeyFields: ["createdAt"])
  event: Event! @belongsTo(fields: ["eventID"])
  eventSubComments: [EventSubComment]
    @hasMany(indexName: "byEventComment", fields: ["id"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type EventSubComment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  content: String!
  likes: [Like] @hasMany(indexName: "byEventSubComment", fields: ["id"])
  active: Boolean!
  eventCommentID: ID!
    @index(
      name: "eventSubCommentSortByEventCommentID"
      queryField: "eventSubCommentSortByEventCommentID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byEventComment", sortKeyFields: ["createdAt"])
  eventComment: EventComment! @belongsTo(fields: ["eventCommentID"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type EventParticipant
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  email: AWSEmail!
  addressID: ID
  address: Address @hasOne(fields: ["addressID"])
  phone: AWSPhone
  weChat: String
  message: String
  numberOfPeople: Int!
  active: Boolean!
  createdAt: AWSDateTime!
  eventParticipantStatus: EventParticipantStatus!
  eventID: ID!
    @index(
      name: "eventParticipantSortByEventID"
      queryField: "eventParticipantSortByEventID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byEvent", sortKeyFields: ["createdAt"])
  event: Event! @belongsTo(fields: ["eventID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

enum EventParticipantStatus {
  ArriveOnTime
  CanNotArrive
  Undecided
}

type Department
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  introduction: String
  email: AWSEmail
  leader: String
  uwcssaJobs: [UwcssaJob] @hasMany(indexName: "byDepartment", fields: ["id"])
  uwcssaMembers: [UwcssaMember]
    @hasMany(indexName: "byDepartment", fields: ["id"])
  kanbans: [Kanban] @hasMany(indexName: "byDepartment", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type UwcssaMember
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  active: Boolean!
  leader: Boolean
  title: String
  subTitle: String
  summary: String
  content: String
  imgURL: AWSURL
  startDate: AWSDateTime
  endDate: AWSDateTime
  createdAt: AWSDateTime!
  departmentID: ID!
    @index(
      name: "uwcssaMemberSortByDepartmentID"
      queryField: "uwcssaMemberSortByDepartmentID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byDepartment", sortKeyFields: ["createdAt"])
  department: Department @belongsTo(fields: ["departmentID"])
  owner: ID!
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type UwcssaJob
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  introduction: String!
  title: String!
  requirements: [String]!
  bonus: [String]!
  imgURLs: [AWSURL]
  benefits: [String]!
  schedule: [String]!
  like: [String]!
  unlike: [String]!
  active: Boolean!
  createdAt: AWSDateTime!
  departmentID: ID!
    @index(
      name: "uwcssaJobSortByDepartmentID"
      queryField: "uwcssaJobSortByDepartmentID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byDepartment", sortKeyFields: ["createdAt"])
  department: Department @belongsTo(fields: ["departmentID"])
  uwcssaJobResumes: [UwcssaJobResume]
    @hasMany(indexName: "byUwcssaJob", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type UwcssaJobResume
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read] }
      { allow: groups, groups: ["admin", "staff"] }
    ]
  ) {
  id: ID!
  name: String!
  email: AWSEmail!
  resumeFileS3Key: String
  phone: AWSPhone!
  message: String
  uwcssaJobResumeStatus: UwcssaJobResumeStatus!
  createdAt: AWSDateTime!
  uwcssaJobID: ID!
    @index(
      name: "uwcssaJobResumeSortByUwcssaJobID"
      queryField: "uwcssaJobResumeSortByUwcssaJobID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byUwcssaJob", sortKeyFields: ["createdAt"])
  uwcssaJob: UwcssaJob! @belongsTo(fields: ["uwcssaJobID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

enum UwcssaJobResumeStatus {
  pending
  inProgress
  finish
}

type ForumTopic
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  forumSubTopics: [ForumSubTopic]!
    @hasMany(indexName: "byForumTopic", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type ForumSubTopic
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  forumTopicID: ID! @index(name: "byForumTopic", sortKeyFields: ["createdAt"])
  forumTopic: ForumTopic! @belongsTo(fields: ["forumTopicID"])
  forumPosts: [ForumPost]!
    @hasMany(indexName: "byForumSubTopic", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type ForumPost
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  title: String!
  content: String!
  imgURLs: [AWSURL]
  tags: [String]
  likes: [Like] @hasMany(indexName: "byForumPost", fields: ["id"])
  sortKey: SortKey!
    @index(
      name: "forumPostSortBySortKey"
      queryField: "forumPostSortBySortKey"
      sortKeyFields: ["createdAt"]
    )
  essential: Boolean
    @auth(
      rules: [
        # { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin", "staff"] }
        { allow: public, operations: [read], provider: iam }
        { allow: private, operations: [read] }
        { allow: private, operations: [read], provider: iam }
      ]
    )
  active: Boolean!
  createdAt: AWSDateTime!
  lastReplyAt: AWSDateTime!
  forumSubTopicID: ID!
    @index(
      name: "forumPostSortByForumSubTopicID"
      queryField: "forumPostSortByForumSubTopicID"
      sortKeyFields: ["createdAt"]
    )
    @index(
      name: "forumPostSortByForumPostLastReplyAt"
      queryField: "forumPostSortByForumPostLastReplyAt"
      sortKeyFields: ["lastReplyAt"]
    )
    @index(name: "byForumSubTopic", sortKeyFields: ["createdAt"])
  forumSubTopic: ForumSubTopic! @belongsTo(fields: ["forumSubTopicID"])
  forumPostComments: [ForumPostComment]!
    @hasMany(indexName: "byForumPost", fields: ["id"])
  forumPostSubComments: [ForumPostSubComment]!
    @hasMany(indexName: "byForumPost", fields: ["id"])
  userID: ID! @index(name: "byUser")
  user: User! @belongsTo(fields: ["userID"])
}

type ForumPostComment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  content: String!
  imgURLs: [AWSURL]
  likes: [Like] @hasMany(indexName: "byForumPostComment", fields: ["id"])
  createdAt: AWSDateTime!
  active: Boolean!
  forumPostID: ID!
    @index(
      name: "forumPostCommentSortByForumPostID"
      queryField: "forumPostCommentSortByForumPostID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byForumPost", sortKeyFields: ["createdAt"])
  forumPost: ForumPost! @belongsTo(fields: ["forumPostID"])
  forumPostSubComments: [ForumPostSubComment]!
    @hasMany(indexName: "byForumPostComment", fields: ["id"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type ForumPostSubComment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  content: String!
  likes: [Like] @hasMany(indexName: "byForumPostSubComment", fields: ["id"])
  active: Boolean!
  createdAt: AWSDateTime!
  replyToUserID: ID!
  replyTo: User @hasOne(fields: ["replyToUserID"])
  forumPostID: ID! @index(name: "byForumPost", sortKeyFields: ["createdAt"])
  forumPost: ForumPost! @belongsTo(fields: ["forumPostID"])
  forumPostCommentID: ID!
    @index(
      name: "forumPostSubCommentSortByForumPostCommentID"
      queryField: "forumPostSubCommentSortByForumPostCommentID"
      sortKeyFields: ["createdAt"]
    )
    @index(name: "byForumPostComment", sortKeyFields: ["createdAt"])
  forumPostComment: ForumPostComment! @belongsTo(fields: ["forumPostCommentID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type MarketUserInfo
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  phone: AWSPhone
  weChat: String
  email: AWSEmail
  userID: ID! @index(name: "byUser")
  user: User! @belongsTo(fields: ["userID"])
}

type MarketItem
  @model(subscriptions: null)
  @searchable
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  imgURLs: [AWSURL]
  title: String
  price: Int
  marketType: MarketType!
  description: String
  location: String
  marketItemCondition: MarketItemCondition
  marketItemCategory: MarketItemCategory
    @index(
      name: "marketItemSortByMarketItemCategory"
      queryField: "marketItemSortByMarketItemCategory"
      sortKeyFields: ["createdAt"]
    )
  tags: [String]
  vehicleType: VehicleType
    @index(
      name: "marketVehicleSortByVehicleType"
      queryField: "marketVehicleSortByVehicleType"
      sortKeyFields: ["createdAt"]
    )
  year: Int
  make: String
  model: String
  exteriorColor: String
  interiorColor: String
  fuelType: String
  marketRentalSaleRent: MarketRentalSaleRent
    @index(
      name: "marketRentalSortByMarketRentalSaleRent"
      queryField: "marketRentalSortByMarketRentalSaleRent"
      sortKeyFields: ["createdAt"]
    )
  propertyType: PropertyType
  bedroomCounts: Int
  bathroomsCounts: Int
  addressID: ID
  address: Address @hasOne(fields: ["addressID"])
  propertySize: Int
  dateAvailable: AWSDateTime
  laundryType: LaundryType
  airConditionType: AirConditionType
  heatingType: HeatingType
  catFriendly: Boolean
  dogFriendly: Boolean
  contactPhone: AWSPhone
  contactWeChat: String
  contactEmail: AWSEmail
  sortKey: SortKey!
    @index(
      name: "marketItemSortBySortKey"
      queryField: "marketItemSortBySortKey"
      sortKeyFields: ["createdAt"]
    )
  active: Boolean!
  createdAt: AWSDateTime!
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  user: User! @belongsTo(fields: ["userID"])
}

type Address
  @model(subscriptions: null)
  @searchable
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  description: String
  place_id: String
  reference: String
  terms: [String]
  types: [String]
  apartmentNumbers: String
  geocodingResult: String
  lat: Float
  lng: Float
  itemID: ID!
  eventParticipant: EventParticipant @hasOne(fields: ["itemID"])
  event: Event @hasOne(fields: ["itemID"])
  marketItem: MarketItem @hasOne(fields: ["itemID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

enum MarketType {
  Item
  Vehicle
  Rental
  Other
}

enum MarketItemCondition {
  New
  UsedLikeNew
  UsedGood
  UsedFair
  Other
}

enum MarketItemCategory {
  Tools
  Furniture
  HouseHold
  Garden
  Appliances
  VideoGames
  BooksMoviesMusic
  BagsLuggage
  WomenClothingShoes
  MenClothingShoes
  JewelryAccessories
  HealthBeauty
  PetSupplies
  BabyKids
  ToysGames
  ElectronicsComputers
  MobilePhones
  Bicycles
  ArtsCrafts
  SportsOutdoors
  AutoParts
  MusicalInstruments
  AntiquesCollectibles
  GarageSale
  Miscellaneous
  Other
}

enum VehicleType {
  CarTruck
  Motorcycle
  PowerSport
  RVCamper
  Trailer
  Other
}

enum MarketRentalSaleRent {
  Rent
  ForSale
  Other
}

enum PropertyType {
  Apartment
  House
  RoomOnly
  Townhouse
  Other
}

enum LaundryType {
  InUnitLaundry
  LaundryInBuilding
  LaundryAvailable
  None
  Other
}

enum AirConditionType {
  CentralAC
  ACAvailable
  None
  Other
}

enum HeatingType {
  CentralHeating
  ElectricHeating
  GasHeating
  RadiatorHeating
  Other
}

type FoundingMember
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  active: Boolean!
  title: String
  subTitle: String
  summary: String
  content: String
  mainParts: [String]
  imgURL: AWSURL
  owner: String
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type Like
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  like: Boolean!
  itemID: ID!
    @index(name: "byUserBeingLiked")
    @index(name: "byArticle")
    @index(name: "byEvent")
    @index(name: "byEventComment")
    @index(name: "byEventSubComment")
    @index(name: "byForumPost")
    @index(name: "byForumPostComment")
    @index(name: "byForumPostSubComment")
    @index(name: "byComment")
    @index(name: "bySubComment")
  comment: Comment @belongsTo(fields: ["itemID"])
  subComment: SubComment @belongsTo(fields: ["itemID"])
  article: Article @belongsTo(fields: ["itemID"])
  event: Event @belongsTo(fields: ["itemID"])
  eventComment: EventComment @belongsTo(fields: ["itemID"])
  eventSubComment: EventSubComment @belongsTo(fields: ["itemID"])
  forumPost: ForumPost @belongsTo(fields: ["itemID"])
  forumPostComment: ForumPostComment @belongsTo(fields: ["itemID"])
  forumPostSubComment: ForumPostSubComment @belongsTo(fields: ["itemID"])
  userBeingLiked: User @belongsTo(fields: ["itemID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

type WebFeedBack
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  rate: Float!
  reason: String
  improvement: String
  userID: ID! @index(name: "byUser")
  user: User! @hasOne(fields: ["userID"])
}

type Kanban
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  title: String!
  content: String
  kanbanStatus: KanbanStatus!
  deadLine: AWSDateTime
  priority: Priority!
  tags: [String]
  points: Int
  active: Boolean!
  sortKey: SortKey!
    @index(
      name: "kanbanSortBySortKey"
      queryField: "kanbanSortBySortKey"
      sortKeyFields: ["createdAt"]
    )
  workSummary: String
  lastUpdatedID: ID
  lastUpdated: User @hasOne(fields: ["lastUpdatedID"])
  assigneeID: ID @index(name: "byUserAssignee", sortKeyFields: ["createdAt"])
  assignee: User @belongsTo(fields: ["assigneeID"])
  departmentID: ID @index(name: "byDepartment", sortKeyFields: ["createdAt"])
  department: Department @belongsTo(fields: ["departmentID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
  createdAt: AWSDateTime!
}

enum Priority {
  Critical
  High
  Average
  Low
}

enum KanbanStatus {
  IDEA
  TODO
  INPROGRESS
  DONE
  WASTED
}

# Form 里面跟着很多Formquesions
type Form
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  formQuestionID: ID!
  formQuestion: FormQuestion @hasOne(fields: ["formQuestionID"])
  order: Int!
  required: Boolean!
  eventID: ID @index(name: "byEvent", sortKeyFields: ["order"])
  event: Event @belongsTo(fields: ["eventID"])
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

# FormQuestion 每个可以跟着多个 From
type FormQuestion
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  description: String
  formType: FormType!
  helperText: String
  imgURLs: [AWSURL]
  pattern: String
  minLength: Int
  maxLength: Int
  placeholder: String
  label: String
  choices: [FormQuestionChoice]
  userID: ID!
  user: User! @hasOne(fields: ["userID"])
}

enum FormType {
  TextFieldShort
  TextFieldLong
  RadioGroupH
  RadioGroupV
  DatePicker
  DateTimePicker
  TimePicker
  FileUpload
  Checkbox
  Select
}

type FormQuestionChoice {
  formQuestionChoice: String
}
