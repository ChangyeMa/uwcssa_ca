# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# 用来更新local 的 graphql 操作： amplify api gql-compile && amplify codegen
# 注意！active用来做sort key(因为布尔值不支持)，但是不是boolean， 只能有'T' 'F'
# 有中括号的都有复数，没有的中括号的没复数
# https://us-east-2.console.aws.amazon.com/appsync/home?region=us-east-2#/4r2t6l2uprdgjhmoocpazejjcq/v1/queries
enum ActiveType {
  T
  F
}

type User
  @model(subscriptions: null)
  @auth(rules: [{ allow: groups, groups: ["uwcssaAdmin"] }]) {
  id: ID!
  email: AWSEmail!
  userName: String! # 和这个东西一样：event.request.userAttributes.sub, Google 登录的话就是google_ 开头
  name: String! # 额外的name，但是他们的username 还是uuid。和Google连用不错
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type UserProfile
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID! # 这个是userName 与owner 一致
  name: String!  # name 不能改
    @auth(
      rules: [
        { allow: public, operations: [read], provider: iam }
        { allow: groups, operations: [read], groups: ["uwcssaUser"] }
        { allow: groups, groups: ["uwcssaAdmin"] }
      ]
    )
  email: AWSEmail
    @auth(
      rules: [
        { allow: public, operations: [read], provider: iam }
        { allow: groups, operations: [read], groups: ["uwcssaUser"] }
        { allow: groups, groups: ["uwcssaAdmin"] }
      ]
    )
  fullName: String
  contactEmail: AWSEmail
  title: String
  about: String
  avatarURL: UserImage @hasOne
  website: AWSURL
  active: ActiveType!
    @index(
      name: "userProfileSortByCreatedAt" #名字要用小写
      queryField: "userProfileSortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID! # 与id 一致
}

type UserImage  # user 所上传的image 都会留个记录
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  objectURL: AWSURL!
  key: String!
  name: String!
  size: Int!
  type: String!
  lastModified: String
  lastModifiedDate: String
  compressedWidth: Int
  objectCompressedURL: AWSURL
  thumbnailWidth: Int
  objectThumbnailURL: AWSURL
  targetTable: String!
  active: ActiveType!
    @index(
      name: "userImageSortByCreatedAt" #名字要用小写
      queryField: "userImageSortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  # user: UserProfile! @hasOne(fields: ["owner"])
}

type Tag
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID! #用id 直接放tag 名词会比较好
  articles: [Article] @manyToMany(relationName: "ArticleTags")
  events: [Event] @manyToMany(relationName: "EventTags")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type Article
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  title: String!
  content: String!
  coverPageImgURL: AWSURL
  coverPageDescription: String
  tags: [Tag] @manyToMany(relationName: "ArticleTags")
  comments: [Comment] @hasMany
  likes: [Like] @hasMany
  count: Count @hasOne # 每一个article 都要有一个count 记录有几个Comments
  active: ActiveType!
    @index(
      name: "articleSortByCreatedAt" #名字要用小写
      queryField: "articleSortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile! @hasOne(fields: ["owner"])
}

type Comment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] } # delete 其实是吧 isDeleted 变成 false
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  content: String!
  isDeleted: Boolean!
  articleCommentsId: ID
    @index(
      name: "commentSortByArticleCommentsIdCreatedAt" #名字要用小写
      queryField: "commentSortByArticleCommentsIdCreatedAt"
      sortKeyFields: ["createdAt"]
    ) # 为什么不加 ！ 因为有event 也需要用comment
  article: Article @belongsTo(fields: ["articleCommentsId"])
  eventCommentsId: ID
    @index(
      name: "commentSortByEventCommentsIdCreatedAt" #名字要用小写
      queryField: "commentSortByEventCommentsIdCreatedAt"
      sortKeyFields: ["createdAt"]
    ) # 为什么不加 ！ 因为有event 也需要用comment
  event: Event @belongsTo(fields: ["articleCommentsId"])

  count: Count @hasOne # 每一个comment 都要有一个count 记录有几个Likes
  likes: [Like] @hasMany
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile! @hasOne(fields: ["owner"])
}

type ContactUs
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [create], provider: iam }
      { allow: owner, operations: [create, read] }
      { allow: groups, operations: [create], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  fullName: String
  email: AWSEmail
  message: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID
  user: UserProfile @hasOne(fields: ["owner"])
}

type Count
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  count: Int!
  article: Article @belongsTo
  comment: Comment @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type Like
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  article: Article @belongsTo
  comment: Comment @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type ResearchDevelopmentTeam
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [update] }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  name: String
  title: String
  subTitle: String
  content: String
  imgURL: AWSURL
  email: AWSEmail
  linkedIn: AWSURL
  github: AWSURL
  website: AWSURL
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile @hasOne(fields: ["owner"])
}

type UwcssaDepartment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID! #用来做名字
  introduction: String
  email: AWSEmail
  leader: ID
  currentLeader: UserProfile @hasOne(fields: ["leader"])
  uwcssaMembers: [UwcssaMember] @hasMany
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type UwcssaMember
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [update] }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  name: String
  title: String
  subTitle: String
  content: String
  imgURL: AWSURL
  email: AWSEmail
  department: UwcssaDepartment @belongsTo
  linkedIn: AWSURL
  website: AWSURL
  github: AWSURL
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile @hasOne(fields: ["owner"])
}

type Event
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  title: String
  coverPageImgURL: AWSURL
  coverPageDescription: String
  content: String
  imgURLs: [AWSURL]
  sponsor: [String]
  online: Boolean!
  group: Boolean!
  tags: [Tag] @manyToMany(relationName: "EventTags")
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  eventStatus: EventStatus!
  eventLocation: Address
  comments: [Comment] @hasMany
  active: ActiveType!
    @index(
      name: "eventSortByCreatedAt" #名字要用小写
      queryField: "eventSortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile @hasOne(fields: ["owner"])
}

enum EventStatus {
  ComingSoon
  InProgress
  SignUpClosed
  Finished
  Canceled
}

# https://stackoverflow.com/questions/69464662/add-parameters-to-mui-google-maps-autocomplete
type Address
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  description: String
  place_id: String
  reference: String
  terms: [String]
  types: [String]
  apartmentNumbers: String
  geocodingResult: String
  lat: Float
  lng: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile @hasOne(fields: ["owner"])
}

# 一个from里面可以有很多 FormItem form questions 可以重复利用也就是说many to many
type Form
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  formItems: [FormItem] @hasMany # 可以有很多 FormItem form questions 可以重复利用也就是说many to many
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile @hasOne(fields: ["owner"])
}

# FormItem 每个可以跟着多个 From
type FormItem
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  name: String!
  isRequired: Boolean! #是否必填
  isString: Boolean! # 是否是字符串
  isEmail: Boolean! # 是否是邮箱
  isNumber: Boolean! # 是否是数字
  description: String # 描述
  formType: FormType!
  helperText: String # 帮助文字
  minLength: Int # 最小长度
  maxLength: Int # 最大长度
  placeholder: String # 占位符
  label: String # 标签
  formSelectChoices: [String] # 选项
  createdAt: AWSDateTime! # 创建时间
  updatedAt: AWSDateTime! # 更新时间
  owner: ID! # 创建者
  user: UserProfile @hasOne(fields: ["owner"])
}

enum FormType {
  TextFieldShort
  TextFieldLong
  Checkbox
  Select
  FileUpload
  RadioGroupH
  RadioGroupV
  DatePicker
  DateTimePicker
  TimePicker
}
