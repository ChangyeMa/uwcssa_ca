# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# 用来更新local 的 graphql 操作： amplify api gql-compile && amplify codegen
# 注意！active用来做sort key(因为布尔值不支持)，但是不是boolean， 只能有'T' 'F'

enum ActiveType {
  T
  F
}

type User
  @model(subscriptions: null)
  @auth(rules: [{ allow: groups, groups: ["uwcssaAdmin"] }]) {
  id: ID!
  email: AWSEmail!
  userName: String! # 和这个东西一样：event.request.userAttributes.sub, Google 登录的话就是google_ 开头
  name: String! # 额外的name，但是他们的username 还是uuid。和Google连用不错
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type UserProfile
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID! # 这个是userName 与owner 一致
  name: String!  # name 不能改
    @auth(
      rules: [
        { allow: public, operations: [read], provider: iam }
        { allow: groups, operations: [read], groups: ["uwcssaUser"] }
        { allow: groups, groups: ["uwcssaAdmin"] }
      ]
    )
  firstName: String
  contactEmail: AWSEmail
  title: String
  about: String
  avatarURL: AWSURL
  website: [AWSURL]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID! # 与id 一致
}

type Tag
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  label: String!
  articles: [Article] @manyToMany(relationName: "ArticleTags")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
}

type Article
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  title: String!
  tags: [Tag] @manyToMany(relationName: "ArticleTags")
  comments: [Comment] @hasMany
  active: ActiveType!
    @index(
      name: "ArticleSortByCreatedAt"
      queryField: "ArticleSortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile! @hasOne(fields: ["owner"])
}

type Comment
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] } # delete 其实是吧 isDeleted 变成 false
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["uwcssaUser"] }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  content: String!
  isDeleted: Boolean!
  articleCommentId: ID @index(name: "byArticle", sortKeyFields: ["createdAt"]) # 为什么不！ 因为有event 也需要用comment
  article: Article @belongsTo(fields: ["articleCommentId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID!
  user: UserProfile! @hasOne(fields: ["owner"])
}

type ContactUs
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [create], provider: iam }
      { allow: groups, groups: ["uwcssaAdmin"] }
    ]
  ) {
  id: ID!
  fullName: String
  email: AWSEmail
  message: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: ID
  user: UserProfile @hasOne(fields: ["owner"])
}
