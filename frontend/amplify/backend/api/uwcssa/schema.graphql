enum SortKey {
  SortKey
}

type Address {
  description: String
  place_id: String
  reference: String
  terms: [String]
  types: [String]
  apartmentNumbers: String
}

type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "userSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "userSortBySortKey"
  ) {
  id: ID!
  username: String!
  email: AWSEmail!
  owner: String!
  firstName: String
  lastName: String
  intro: String
  major: String
  avatarImgURL: AWSURL
  backGroundImgURL: AWSURL
  linkedIn: String
  github: String
  sortKey: SortKey!
  createdAt: AWSDateTime!
  badges: [String]
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
        { allow: private, operations: [read] }
        { allow: public, operations: [read], provider: iam }
      ]
    )
  userEducations: [UserEducation] @connection(keyName: "byUser", fields: ["id"])
  userExperiences: [UserExperience]
    @connection(keyName: "byUser", fields: ["id"])
  marketUserInfo: [MarketUserInfo]
    @connection(keyName: "byUser", fields: ["id"])
  likes: [Like]
  beingLiked: [Like] @connection(keyName: "byUserBeingLiked", fields: ["id"])
  topics: [Topic]
  articles: [Article]
  articleComments: [ArticleComment]
  events: [Event]
  eventParticipants: [EventParticipant]
  departments: [Department]
  uwcssaJobs: [UwcssaJob]
  uwcssaJobResumes: [UwcssaJobResume]
  forumTopics: [ForumTopic]
  forumSubTopics: [ForumSubTopic]
  forumPosts: [ForumPost] @connection(keyName: "byUser", fields: ["id"])
  forumPostComments: [ForumPostComment]
  forumPostSubComments: [ForumPostSubComment]
  marketItems: [MarketItem]
  foundingMember: [FoundingMember]
  webFeedBack: [WebFeedBack] @connection(keyName: "byUser", fields: ["id"])
  userMutationLog: [UserMutationLog]
}

type UserEducation
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID", "createdAt"]) {
  id: ID!
  school: String
  degree: String
  fieldOfStudy: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  grade: Float
  description: String
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UserExperience
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID", "createdAt"]) {
  id: ID!
  title: String
  employmentType: String
  companyName: String
  location: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  industry: String
  description: String
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Topic
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  articles: [Article] @connection(keyName: "byTopic", fields: ["id"])
  events: [Event] @connection(keyName: "byTopic", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Article
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "articleSortBySortKey"
  )
  @key(name: "byTopic", fields: ["topicID"]) {
  id: ID!
  title: String!
  summary: String
  content: String!
  #imgS3Keys: [String]
  imgURLs: [AWSURL]
  #qrCodeImgS3Key: String
  qrCodeImgURL: AWSURL
  likes: [Like] @connection(keyName: "byArticle", fields: ["id"])
  tags: [String]
  sortKey: SortKey! #用来当第二索引的
  active: Boolean!
  createdAt: AWSDateTime!
  topicID: ID!
  topic: Topic! @connection(fields: ["topicID"])
  articleComments: [ArticleComment]
    @connection(keyName: "byArticle", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ArticleComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleCommentSortByArticleID"
    fields: ["articleID", "createdAt"]
    queryField: "articleCommentSortByArticleID"
  )
  @key(name: "byArticle", fields: ["articleID", "createdAt"]) {
  id: ID!
  content: String!
  likes: [Like] @connection(keyName: "byArticleComment", fields: ["id"])
  active: Boolean!
  articleID: ID!
  article: Article! @connection(fields: ["articleID"])
  createdAt: AWSDateTime!
  articleSubComments: [ArticleSubComment]
    @connection(keyName: "byArticleComment", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ArticleSubComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleSubCommentSortByArticleCommentID"
    fields: ["articleCommentID", "createdAt"]
    queryField: "articleSubCommentSortByArticleCommentID"
  )
  @key(name: "byArticleComment", fields: ["articleCommentID", "createdAt"]) {
  id: ID!
  content: String!
  likes: [Like] @connection(keyName: "byArticleSubComment", fields: ["id"])
  active: Boolean!
  articleCommentID: ID!
  articleComment: ArticleComment! @connection(fields: ["articleCommentID"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Event
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "eventSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "eventSortBySortKey"
  )
  @key(name: "byTopic", fields: ["topicID"]) {
  id: ID!
  summary: String
  title: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  online: Boolean! #代表线上线下
  group: Boolean!
  backGroundImgURL: AWSURL
  qrCodeImgURL: AWSURL
  posterImgURL: AWSURL
  imgURLs: [AWSURL]
  content: String
  address: Address
  sponsor: [String]
  tags: [String]
  eventStatus: EventStatus!
  active: Boolean!
  createdAt: AWSDateTime!
  sortKey: SortKey!
  topicID: ID!
  topic: Topic! @connection(fields: ["topicID"])
  eventComments: [EventComment] @connection(keyName: "byEvent", fields: ["id"])
  eventParticipants: [EventParticipant]
    @connection(keyName: "byEvent", fields: ["id"])
  likes: [Like] @connection(keyName: "byEvent", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum EventStatus {
  ComingSoon
  InProgress
  SignUpClosed
  Finished
  Canceled
}

type EventComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "eventCommentSortByEventID"
    fields: ["eventID", "createdAt"]
    queryField: "eventCommentSortByEventID"
  )
  @key(name: "byEvent", fields: ["eventID", "createdAt"]) {
  id: ID!
  content: String!
  likes: [Like] @connection(keyName: "byEventComment", fields: ["id"])
  active: Boolean!
  eventID: ID!
  event: Event! @connection(fields: ["eventID"])
  eventSubComments: [EventSubComment]
    @connection(keyName: "byEventComment", fields: ["id"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type EventSubComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "eventSubCommentSortByEventCommentID"
    fields: ["eventCommentID", "createdAt"]
    queryField: "eventSubCommentSortByEventCommentID"
  )
  @key(name: "byEventComment", fields: ["eventCommentID", "createdAt"]) {
  id: ID!
  content: String!
  likes: [Like] @connection(keyName: "byEventSubComment", fields: ["id"])
  active: Boolean!
  eventCommentID: ID!
  eventComment: EventComment! @connection(fields: ["eventCommentID"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type EventParticipant
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "eventParticipantSortByEventID"
    fields: ["eventID", "createdAt"]
    queryField: "eventParticipantSortByEventID"
  )
  @key(name: "byEvent", fields: ["eventID", "createdAt"]) {
  id: ID!
  name: String!
  email: AWSEmail!
  address: Address
  phone: AWSPhone
  weChat: String
  message: String
  numberOfPeople: Int!
  active: Boolean!
  createdAt: AWSDateTime!
  eventParticipantStatus: EventParticipantStatus!
  eventID: ID!
  event: Event! @connection(fields: ["eventID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum EventParticipantStatus {
  ArriveOnTime
  CanNotArrive
  Undecided
}

type Department
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  introduction: String
  email: AWSEmail
  leader: String
  uwcssaJobs: [UwcssaJob] @connection(keyName: "byDepartment", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UwcssaJob
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "uwcssaJobSortByDepartmentID"
    fields: ["departmentID", "createdAt"]
    queryField: "uwcssaJobSortByDepartmentID"
  )
  @key(name: "byDepartment", fields: ["departmentID", "createdAt"]) {
  id: ID!
  introduction: String!
  title: String!
  requirements: [String]!
  bonus: [String]!
  imgURLs: [AWSURL]
  benefits: [String]!
  schedule: [String]!
  like: [String]!
  unlike: [String]!
  active: Boolean!
  createdAt: AWSDateTime!
  departmentID: ID!
  department: Department @connection(fields: ["departmentID"])
  uwcssaJobResumes: [UwcssaJobResume]
    @connection(keyName: "byUwcssaJob", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UwcssaJobResume
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read] } # 需要改只能上传和查看
      { allow: groups, groups: ["admin", "staff"] }
    ]
  )
  @key(
    name: "uwcssaJobResumeSortByUwcssaJobID"
    fields: ["uwcssaJobID", "createdAt"]
    queryField: "uwcssaJobResumeSortByUwcssaJobID"
  )
  @key(name: "byUwcssaJob", fields: ["uwcssaJobID", "createdAt"]) {
  id: ID!
  name: String!
  email: AWSEmail!
  resumeFileS3Key: String
  phone: AWSPhone!
  message: String
  uwcssaJobResumeStatus: UwcssaJobResumeStatus!
  createdAt: AWSDateTime!
  uwcssaJobID: ID!
  uwcssaJob: UwcssaJob! @connection(fields: ["uwcssaJobID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum UwcssaJobResumeStatus {
  pending
  inProgress
  finish
}

type ForumTopic
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  forumSubTopics: [ForumSubTopic]!
    @connection(keyName: "byForumTopic", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumSubTopic
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byForumTopic", fields: ["forumTopicID", "createdAt"]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  forumTopicID: ID!
  forumTopic: ForumTopic! @connection(fields: ["forumTopicID"])
  forumPosts: [ForumPost]!
    @connection(keyName: "byForumSubTopic", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumPost
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "forumPostSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "forumPostSortBySortKey"
  )
  @key(
    name: "forumPostSortByForumSubTopicID"
    fields: ["forumSubTopicID", "createdAt"]
    queryField: "forumPostSortByForumSubTopicID"
  )
  @key(
    name: "forumPostSortByForumPostLastReplyAt"
    fields: ["forumSubTopicID", "lastReplyAt"]
    queryField: "forumPostSortByForumPostLastReplyAt"
  )
  @key(name: "byUser", fields: ["userID"])
  @key(name: "byForumSubTopic", fields: ["forumSubTopicID", "createdAt"]) {
  id: ID!
  title: String!
  content: String!
  imgURLs: [AWSURL]
  tags: [String]
  likes: [Like] @connection(keyName: "byForumPost", fields: ["id"])
  sortKey: SortKey!
  essential: Boolean
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin", "staff"] }
        { allow: private, operations: [read] }
        { allow: public, operations: [read], provider: iam }
      ]
    )
  active: Boolean!
  createdAt: AWSDateTime!
  lastReplyAt: AWSDateTime!
  forumSubTopicID: ID!
  forumSubTopic: ForumSubTopic! @connection(fields: ["forumSubTopicID"])
  forumPostComments: [ForumPostComment]!
    @connection(keyName: "byForumPost", fields: ["id"])
  forumPostSubComments: [ForumPostSubComment]!
    @connection(keyName: "byForumPost", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumPostComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "forumPostCommentSortByForumPostID"
    fields: ["forumPostID", "createdAt"]
    queryField: "forumPostCommentSortByForumPostID"
  )
  @key(name: "byForumPost", fields: ["forumPostID", "createdAt"]) {
  id: ID!
  content: String!
  imgURLs: [AWSURL]
  likes: [Like] @connection(keyName: "byForumPostComment", fields: ["id"])
  createdAt: AWSDateTime!
  active: Boolean!
  forumPostID: ID!
  forumPost: ForumPost! @connection(fields: ["forumPostID"])
  forumPostSubComments: [ForumPostSubComment]!
    @connection(keyName: "byForumPostComment", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumPostSubComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "forumPostSubCommentSortByForumPostCommentID"
    fields: ["forumPostCommentID", "createdAt"]
    queryField: "forumPostSubCommentSortByForumPostCommentID"
  )
  @key(name: "byForumPostComment", fields: ["forumPostCommentID", "createdAt"])
  @key(name: "byForumPost", fields: ["forumPostID", "createdAt"]) {
  id: ID!
  content: String!
  likes: [Like] @connection(keyName: "byForumPostSubComment", fields: ["id"])
  active: Boolean!
  createdAt: AWSDateTime!
  replyToUserID: ID!
  replyTo: User @connection(fields: ["replyToUserID"])
  forumPostID: ID!
  forumPost: ForumPost! @connection(fields: ["forumPostID"])
  forumPostCommentID: ID!
  forumPostComment: ForumPostComment!
    @connection(fields: ["forumPostCommentID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type MarketUserInfo
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  phone: AWSPhone
  weChat: String
  email: AWSEmail
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type MarketItem
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketItemSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "marketItemSortBySortKey"
  )
  @key(
    name: "marketItemSortByMarketItemCategory"
    fields: ["marketItemCategory", "createdAt"]
    queryField: "marketItemSortByMarketItemCategory"
  )
  @key(
    name: "marketVehicleSortByVehicleType"
    fields: ["vehicleType", "createdAt"]
    queryField: "marketVehicleSortByVehicleType"
  )
  @key(
    name: "marketRentalSortByMarketRentalSaleRent"
    fields: ["marketRentalSaleRent", "createdAt"]
    queryField: "marketRentalSortByMarketRentalSaleRent"
  ) {
  id: ID!
  name: String
  imgURLs: [AWSURL]
  title: String
  price: Int
  marketType: MarketType!
  description: String
  location: String
  marketItemCondition: MarketItemCondition
  marketItemCategory: MarketItemCategory
  tags: [String]
  vehicleType: VehicleType
  year: Int
  make: String
  model: String
  exteriorColor: String
  interiorColor: String
  fuelType: String
  marketRentalSaleRent: MarketRentalSaleRent
  propertyType: PropertyType
  bedroomCounts: Int
  bathroomsCounts: Int
  address: Address
  propertySize: Int
  dateAvailable: AWSDateTime
  laundryType: LaundryType
  airConditionType: AirConditionType
  heatingType: HeatingType
  catFriendly: Boolean
  dogFriendly: Boolean
  contactPhone: AWSPhone
  contactWeChat: String
  contactEmail: AWSEmail
  sortKey: SortKey!
  active: Boolean!
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum MarketType {
  Item
  Vehicle
  Rental
  Other
}

enum MarketItemCondition {
  New
  UsedLikeNew
  UsedGood
  UsedFair

  Other
}

enum MarketItemCategory {
  Tools
  Furniture
  HouseHold
  Garden
  Appliances

  VideoGames
  BooksMoviesMusic

  BagsLuggage
  WomenClothingShoes
  MenClothingShoes
  JewelryAccessories

  HealthBeauty
  PetSupplies
  BabyKids
  ToysGames

  ElectronicsComputers
  MobilePhones

  Bicycles
  ArtsCrafts
  SportsOutdoors
  AutoParts
  MusicalInstruments
  AntiquesCollectibles

  GarageSale
  Miscellaneous

  Other
}

enum VehicleType {
  CarTruck
  Motorcycle
  PowerSport
  RVCamper
  Trailer
  Other
}

enum MarketRentalSaleRent {
  Rent
  ForSale
  Other
}

enum PropertyType {
  Apartment
  House
  RoomOnly
  Townhouse
  Other
}
enum LaundryType {
  InUnitLaundry
  LaundryInBuilding
  LaundryAvailable
  None
  Other
}

enum AirConditionType {
  CentralAC
  ACAvailable
  None
  Other
}

enum HeatingType {
  CentralHeating
  ElectricHeating
  GasHeating
  RadiatorHeating
  Other
}

type FoundingMember
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  active: Boolean!
  title: String
  summary: String
  content: String
  mainParts: [String]
  imgURL: AWSURL
  owner: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Like
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUserBeingLiked", fields: ["itemID"])
  @key(name: "byArticle", fields: ["itemID"])
  @key(name: "byArticleComment", fields: ["itemID"])
  @key(name: "byArticleSubComment", fields: ["itemID"])
  @key(name: "byEvent", fields: ["itemID"])
  @key(name: "byEventComment", fields: ["itemID"])
  @key(name: "byEventSubComment", fields: ["itemID"])
  @key(name: "byForumPost", fields: ["itemID"])
  @key(name: "byForumPostComment", fields: ["itemID"])
  @key(name: "byForumPostSubComment", fields: ["itemID"]) {
  id: ID!
  like: Boolean!
  itemID: ID!
  article: Article @connection(fields: ["itemID"])
  articleComment: ArticleComment @connection(fields: ["itemID"])
  articleSubComment: ArticleSubComment @connection(fields: ["itemID"])
  event: Event @connection(fields: ["itemID"])
  eventComment: EventComment @connection(fields: ["itemID"])
  eventSubComment: EventSubComment @connection(fields: ["itemID"])
  forumPost: ForumPost @connection(fields: ["itemID"])
  forumPostComment: ForumPostComment @connection(fields: ["itemID"])
  forumPostSubComment: ForumPostSubComment @connection(fields: ["itemID"])
  userBeingLiked: User @connection(fields: ["itemID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type WebFeedBack
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [create, read, update] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  rate: Float!
  reason: String
  improvement: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UserMutationLog
  @model
  @auth(
    rules: [{ allow: groups, groups: ["admin"], operations: [read, update] }]
  )
  @key(
    name: "userMutationLogSortByUserID"
    fields: ["userID", "createdAt"]
    queryField: "userMutationLogSortByUserID"
  )
  @key(
    name: "userMutationLogSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "userMutationLogSortBySortKey"
  )
  @key(
    name: "userMutationLogSortBy__typename"
    fields: ["typename", "createdAt"]
    queryField: "userMutationLogSortBy__typename"
  ) {
  id: ID!
  eventName: String!
  typename: String!
  eventSourceARN: String!
  record: AWSJSON!
  createdAt: AWSDateTime!
  sortKey: SortKey!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}
